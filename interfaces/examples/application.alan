users
	anonymous
	dynamic :  .'Users'
	password : .'Password'
/*
	Read and write access to data can be restricted to certain users.

	You can have both anonymous and dynamic users. Remove the anonymous keyword
	to require all users to log into the application.

	'dynamic' points to the collection of users.
	'password' points to a text property to use as a password.
*/


root {
	//
	// Elementary Data
	//

	'collection 1': collection {
		/*
			A collection is similar to a table in a relational database.
			There is no explicit primary key defined, every collection entry
			has a unique key (a text) by default.
		*/

		'a text property': text
		/*
			A text property has no constraints and is never invalid.
		*/


		'a integer property': integer 'meters'
		'a natural property': natural 'meters'
		'a date property'   : integer 'date'
		/*
			Numbers have a numerical type, e.g. 'meters' or 'kilograms'.

			There are 2 base types: integer and natural.
			Naturals are larger than 0. Because they are guaranteed to be > 0,
			they can be used in divisions.
			Integers are just like as the mathematical idea of an integer:
			a number that can be negative, 0 or positive.

			A date property is an integer. The only thing that makes a date
			special is its presentation in the user interface. A 'date' or
			'date and time' number is recognized as such when generating the
			GUI. The GUI also has special widgets for numbers that are
			'seconds', 'minutes' and 'hours'.
		*/


		'a state group property': stategroup (
			'option 1' -> {
				'a text under option 1': text
			}
			'option 2' -> {
				workfor 'User'
			}
		)
		/*
			State groups require the user to make a choice between one of the
			options. Every option can have additional properties that are only
			available if that option is selected.
			This concept is comparable with what in functional programming
			languages is called 'sum types' or 'tagged unions'. It is also
			comparable to the 'choice' element in xml schema

			"workfor" states that an entry is a todo for the 'User' role, if
			it's in that state. Being in state 'option 2' here creates work
			for someone to take it out of that state. This workfor can be
			queried in the GUI.
		*/


		'a group property': group {
			'a text in the group': text
			'a second text in the group': text
		}
		/*
			A group creates a namespace. It doesn't add data, but it allows you
			to group properties together to make the model more readable, which
			also tends to make the GUI more readable as well.
		*/

	}
	'collection 2': collection {

		'a reference': text -> .^ . 'collection 1'
		/*
			Here a text refers to an entry in another collection.
			References are similar to foreign keys in a relational database, or
			pointers in a programming language.
			A reference is defined by a path to a collection. In the GUI, the
			user will pick an entry from that collection.
			To reference the 'collection 1' collection, we describe a path by:
			- stepping up out of the current collection (.^) *
			- select a collection (.)
			- called 'collection 1'

			* You can also step out of a group (+^) or a state group (?^)
		*/


		'a matrix': collection -> .^ . 'collection 1' {
			'a text in the matrix': text
		}
		/*
			A matrix is a collection where each key is a reference.
		*/
	}


	//
	// Derivations
	//

	'measurements': collection {
		'distance 1': natural 'meters'
		'distance 2': natural 'meters'
		'multiplier': integer 'count'

		// Add multiple numbers
		'total distance':= natural 'meters' = sumlist (
			# 'distance 1',
			# 'distance 2'
		)
		// Subtract a number
		'difference':= integer 'meters' = sumlist (
			# 'distance 1',
			- # 'distance 2'
		)
		// The product of two numbers
		'multiplied distance 1':= integer 'meters' = product (
			# 'distance 1' as 'meters',
			# 'multiplier'
		)
		// Division (requires the denominator to be a natural)
		'distance 1 contribution':= integer 'permille' = from 'fraction' division (
			# 'distance 1' as 'meters',
			# 'total distance'
		)
	}

	// Count the entries in a collection
	'number of measurements':= integer 'count' = count . 'measurements'

	// Sum all values in a collection
	'total measurement':= integer 'meters' = sum .'measurements' # 'total distance'

	// Compare two numbers
	'required measurements': integer 'count'
	'enough measurements':= stategroup = match (
		# 'number of measurements' == # 'required measurements'
	) (
		// compare against zero: ... == # zero
		| true = 'yes'
		| false = 'no'
	) (
		'yes' -> { }
		'no' -> { }
	)

	// Map one or more state groups
	'satisfied':= stategroup = switch ( ? 'enough measurements' ) (
		| 'yes' = 'yes'
		| 'no' = 'no'
	) (
		'yes' -> { }
		'no' -> { }
	)


	//
	// Permissions
	//
	/*
		The following permissions can be configured for nodes:
		- read
		- update
		Child nodes inherit permissions from ancestor nodes.

		Reading a property value requires read permissions for all ancestor nodes of the property value.
		Thus, starting at a property, all rules found when "walking up" the model are evaluated when requesting the property value.

		Updating a property value requires read permission for all ancestor nodes of the property value that is to be updated.
		In addition, the nearest can-update rule is evaluated.
		For example, updating an 'owner' of an 'entries' item (see below), requires read permissions for the 'entries' item.
		In addition, it requires update permission for the 'entries' node (as specified by the nearest can-update statement shown below).

		The following permissions can be configured for states and collections:
		- create
		- delete
		If these permissions are left unspecified, the overlying update permission applies to create and delete.
		Child properties do not inherit create and delete permissions specified at ancestor collections and states.

		Available types of permission checks:
		- the user has state groups set to specific states (existence)
		- a reference points to the user                   (equality)
		- the user exists in a collection                  (containment)
	*/
	'entries': collection
		// restrict creation of entries to users where 'Manager' is set to 'Yes'
		can-create: user ?'Manager'|'Yes'
		// restrict deletion of an entry to its owner
		can-delete: equal ( user , $ >'owner'>key )
	{
		// allow all users to read the entries in this collection
		can-read: user
		// allow all users (including anonymous users) to read entries in this collection
		can-read: unrestricted
		// allow only "members" to read the item
		can-read: any $ .'members' [ user ] // members collection has to contain the user

		/*
			Permissions can be combined with "OR" rules, so this would
			also enable update for both "managers" and the "owner"
		*/
		can-update: user ?'Manager'|'Yes' || equal ( user , $ >'owner'>key )

		'owner': text -> .^ .'Users'
		'members': collection -> .^ .'Users' { }
	}

}

numerical-types
/*
	This list declares all the numerical types that can be used.
	Also includes conversions.
*/
	'date'
	'count'

	'meters'
		// declare that 'meters' times 'count' results in a 'meters' value
		= 'meters' * 'count'

	'fraction'
		// declare that 'meters' divided by meters results in a 'fraction'
		= 'meters' / 'meters'

	'permille'
		// declare that a fraction times 1000 is a 'permille'
		= 'fraction' * 1 * 10 ^ 3
